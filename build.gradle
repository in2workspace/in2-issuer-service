plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'jacoco'
}

group = 'es.in2'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    toolVersion = "0.8.12"
}

sonar {
    properties {
        property "sonar.projectKey", "in2workspace_in2-issuer-service"
        property "sonar.organization", "in2workspace"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions",
                "**/IssuerApplication.java, " +
                        "**/DefaultSecurityConfig.java, " +
                        "**/TenantRepository.java, "
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Starters
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Database
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    // Cache
    implementation 'com.google.guava:guava:33.3.1-jre'

    // JWT
    implementation 'com.nimbusds:nimbus-jose-jwt:9.42'

    // Monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    
    // Devtools
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                "**/IssuerApplication.class",
                "**/DefaultSecurityConfig.class",
                "**/TenantRepository.class"
        ])
    }))
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}